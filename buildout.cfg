[buildout]
develop=.
parts=
	sv
	test-package


[config]
recipe = mete0r.recipe.localconfig
localconfig.path = buildout.local.json

app-pserve-port = 6543


[app.dev]
recipe = zc.recipe.deployment
prefix = ${buildout:directory}
user = ${whoami:user}
etc-user = ${whoami:user}


[app.ini]
recipe = collective.recipe.template
output = ${app.dev:etc-directory}/${:_buildout_section_name_}
mode = 0600
input =
	inline:

	[app:main]
	use = egg:MYAPP

	pyramid.reload_templates = true
	pyramid.debug_authorization = false
	pyramid.debug_notfound = false
	pyramid.debug_routematch = false
	pyramid.default_locale_name = en
	pyramid.includes =
		pyramid_debugtoolbar

	# By default, the toolbar only appears for clients from IP addresses
	# '127.0.0.1' and '::1'.
	debugtoolbar.hosts = 127.0.0.1 ::1

	lib-directory = ${app.dev:lib-directory}
	cache-directory = ${app.dev:cache-directory}

	###
	# wsgi server configuration
	###

	[server:main]
	use = egg:waitress#main
	host = 127.0.0.1
	port = ${config:app-pserve-port}

	###
	# logging configuration
	# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/logging.html
	###

	[loggers]
	keys = root

	[handlers]
	keys = console

	[formatters]
	keys = generic

	[logger_root]
	level = INFO
	handlers = console

	[handler_console]
	class = StreamHandler
	args = (sys.stderr,)
	level = NOTSET
	formatter = generic

	[formatter_generic]
	format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s


[app]
recipe = collective.recipe.template
output = ${buildout:bin-directory}/${:_buildout_section_name_}
mode = 0700
input =
	inline:
	#!/bin/sh
	app=""

	case "$1" in
	request|routes|serve|shell|tweens|views)
		app="p$1"
	esac

	[ "$app" = "" ] && {
		echo "usage: $0 (request|routes|serve|shell|tweens|views)"
		exit 1
	}
	shift
	exec "${buildout:bin-directory}/$app" "${app.ini:output}" "$@"


[supervisor]
recipe = zc.recipe.deployment
prefix = ${buildout:directory}
user = ${whoami:user}
etc-user = ${whoami:user}


[supervisord.ini]
recipe = collective.recipe.template
output = ${supervisor:etc-directory}/${:_buildout_section_name_}
mode = 0600
input =
	inline:
	; supervisor config file

	[unix_http_server]
	file=${supervisor:run-directory}/supervisor.sock   ; (the path to the socket file)
	chmod=0700                       ; sockef file mode (default 0700)

	[supervisord]
	logfile=${supervisor:log-directory}/supervisord.log ; (main log file;default $CWD/supervisord.log)
	pidfile=${supervisor:run-directory}/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
	childlogdir=${supervisor:log-directory}             ; ('AUTO' child log dir, default $TEMP)

	; the below section must remain in the config file for RPC
	; (supervisorctl/web interface) to work, additional interfaces may be
	; added by defining them in separate rpcinterface: sections
	[rpcinterface:supervisor]
	supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

	[supervisorctl]
	serverurl=unix://${supervisor:run-directory}/supervisor.sock ; use a unix:// URL  for a unix socket

	; The [include] section can just contain the "files" setting.  This
	; setting can list multiple files (separated by whitespace or
	; newlines).  It can also contain wildcards.  The filenames are
	; interpreted as relative to this file.  Included files *cannot*
	; include files themselves.

	[include]
	files = ${supervisor:etc-directory}/conf.d/*.conf

	[program:pserve]
	command = ${app:output} serve


[sv]
recipe = collective.recipe.template
output = ${buildout:bin-directory}/${:_buildout_section_name_}
mode = 0700
input =
	inline:
	#!/bin/sh
	app=""
	case "$1" in
	run)
		app="supervisord" ;;
	control)
		app="supervisorctl" ;;
	esac

	[ "$app" = "" ] && {
		echo "usage: $0 (run|control)"
		exit 1
	}

	shift
	exec "${buildout:bin-directory}/$app" -c "${supervisord.ini:output}" "$@"


[whoami]
recipe = mete0r.recipe.whoami


[test-package]
recipe=zc.recipe.testrunner
eggs=
	MYAPP[test]
defaults=['--package', 'MYAPP', '--auto-progress', '--auto-color', '--coverage=${buildout:directory}/.coverage']
